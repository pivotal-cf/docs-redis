---
title: Shared-VM Service Offering
owner: London Services
---

<strong><%= modified_date %></strong>

<%= vars.product_full %> offers on-demand and shared-VM service plans.
This section describes the architecture, lifecycle, and configurations of the shared-VM plan.
For similar information for the on-demand service plan, see [On-Demand Service Offering](./architecture.html).

## <a id="about"></a> About the Shared-VM Plan

The shared-VM plan is a pre-provisioned service plan for development and testing purposes only.
An instance of this plan provisions a single Redis process on a single shared VM.
This plan is suitable for workloads that do not require dedicated hardware.
This plan is **not** suitable for production purposes.


## <a id="diagram2"></a>Architecture Diagram for Shared Plans

This diagram shows the architecture of the service broker and shared-VM plans
and how the user's app binds to a Redis instance.

![Architecture Diagram](images/legacy-arch.png)

## <a id="config2"></a> Settings for Shared-VM Service Plans

You cannot change the default Redis settings for shared-VM plans. Because of this, you cannot run
 `cf update-service` with the `-c` flag to set config parameters, as described in the [Cloud Foundry documentation](https://cli.cloudfoundry.org/en-US/cf/update-service.html).

The default Redis settings are as follows:

### <a id="memory-policy"></a> Memory Policy

Redis is configured with a `maxmemory-policy` of `no-eviction`. This policy means that when the memory is
 full, the service does not evict any keys or perform any write operations until memory becomes available.

### <a id="persistence"></a> Persistence

Shared-VM Redis supports both Redis Database Backup (RDB) and Append-Only File (AOF) persistence options.
Redis writes to the AOF log every second. For more information, see
[Redis Persistence](https://redis.io/topics/persistence) in the Redis documentation.

### <a id="connections"></a> Maximum Number of Connections

The maximum number of connections, `maxclients`, is set at 10,000 by default.
Redis might reduce this number when run on a system with a low maximum number of file descriptors.
You can retrieve the actual setting on your Redis service instances with the Redis command `CONFIG GET maxclients`.<br><br>
You can run the Redis command `CONFIG SET maxclients NUMBER` in your service instance to reduce `maxclients`
until the next BOSH action occurs. For example:
<pre class="terminal">
$ CONFIG SET maxclients 9000
</pre>
You cannot set `maxclients` above 10,000 and you cannot configure shared plans to permanently use a custom limit.


### <a id="rep-and-event-note"></a> Replication and Event Notification

Replication and event notification are not configured.

## <a id="instance-deploy"></a>Change the Service Instances Limit

This plan deploys a Redis instance on a shared VM and a single service broker VM. To prevent this, set the **Max instances limit** on the **Shared-VM Plan** tab in <%= vars.ops_manager %> to `0`.

You can increase the maximum number of service instances that can run on a shared VM from the default five to
 250. There is a hard maximum of 250 shared instances.

If you increase the number of instances that can be run on a VM, consider increasing the resources allocated
 to the VM, especially RAM and CPU. Failure to do so might lead to a degradation of performance.

You can also increase the maximum amount of RAM allocated to each service instance that is running on this VM.

If you decrease the service instance limit, any instances that are now running
  beyond the limit are not automatically terminated. You cannot create any new instances until the total
  falls below the new limit.<br>
  For example, if you use 10 service instances, and you then reduce the limit to 8, the two instances outside
  the limit continue to run until you terminate them.

The number of shared-VM instances available to developers is set by the operator.<br>
The maximum number of shared-VM instances is relative to the memory allocated to each shared-VM instance and
the total memory of the Redis service broker.<br>
For more information, see [Configure Shared-VM Plan Settings](./installing.html#shared-vm-config).

## <a id="lua-scripting"></a> Lua Scripting

You can enable or disable Lua scripting. Changes to this configuration apply to all existing shared-VM
instances. Lua scripting can adversely affect the performance of other service instances on the VM, so
Pivotal recommends disabling Lua scripting unless developers need it enabled.
For more information, see [Configure Shared-VM Plan Settings](./installing.html#shared-vm-config).

<p class="note warning"><strong>Warning:</strong>
  The Steeltoe connector for Redis requires <%= vars.product_short %> to support Lua scripting.
  Check if any of your apps require Lua scripting.
  By default, Lua scripting is disabled for <%= vars.product_short %>, but a <%= vars.platform_name %> operator can
  change the setting to enable it by selecting the <strong>Lua Scripting</strong> checkbox in the
  Shared-VM Plan configuration pane.
</p>

## <a id="limits-shared"></a> Known Limitations of the Shared-VM Plan

The shared-vm plan cannot:

* Scale beyond a single VM
* Run the commands `CONFIG`, `MONITOR`, `SAVE`, `BGSAVE`, `SHUTDOWN`, `BGREWRITEAOF`, `REPLICAOF`, `SLAVEOF`, `DEBUG`, or `SYNC`
* Constrain CPU or disk usage
* Manage "noisy neighbor" problems, which makes it unsuitable for production apps


## <a id="lifecycle-shared"></a>Lifecycle for Shared-VM Service Plan

Below is the lifecycle of <%= vars.product_short %>, from an operator installing the tile, to an app developer using the service, to an operator deleting the tile.

![Lifecycle Diagram](images/Redis_timeline_legacy.png)
